const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ D√©ploiement Vercel - SoliReserve Enhanced');
console.log('============================================\n');

// Fonction pour ex√©cuter une commande avec gestion d'erreur
function runCommand(command, description) {
  try {
    console.log(`üìã ${description}...`);
    execSync(command, { stdio: 'inherit' });
    console.log(`‚úÖ ${description} - R√©ussi\n`);
    return true;
  } catch (error) {
    console.log(`‚ùå ${description} - √âchec: ${error.message}\n`);
    return false;
  }
}

// Fonction pour v√©rifier si un fichier existe
function checkFile(filePath, description) {
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${description} - Pr√©sent`);
    return true;
  } else {
    console.log(`‚ùå ${description} - Manquant`);
    return false;
  }
}

// V√©rification de la structure du projet
console.log('üîç V√©rification de la structure du projet...');
const requiredFiles = [
  { path: 'package.json', desc: 'package.json' },
  { path: 'next.config.js', desc: 'next.config.js' },
  { path: 'app/page.tsx', desc: 'Page d\'accueil' },
  { path: 'app/layout.tsx', desc: 'Layout principal' },
  { path: 'tsconfig.json', desc: 'Configuration TypeScript' },
  { path: 'tailwind.config.js', desc: 'Configuration Tailwind' }
];

let allFilesPresent = true;
requiredFiles.forEach(file => {
  if (!checkFile(file.path, file.desc)) {
    allFilesPresent = false;
  }
});

if (!allFilesPresent) {
  console.log('\n‚ùå Structure du projet incompl√®te. Arr√™t du d√©ploiement.');
  process.exit(1);
}

console.log('\n‚úÖ Structure du projet valid√©e\n');

// Nettoyage des caches
console.log('üßπ Nettoyage des caches...');
try {
  if (fs.existsSync('.next')) {
    fs.rmSync('.next', { recursive: true, force: true });
    console.log('‚úÖ Cache .next supprim√©');
  }
  if (fs.existsSync('node_modules/.cache')) {
    fs.rmSync('node_modules/.cache', { recursive: true, force: true });
    console.log('‚úÖ Cache node_modules supprim√©');
  }
} catch (error) {
  console.log(`‚ö†Ô∏è Erreur lors du nettoyage: ${error.message}`);
}
console.log('');

// Installation des d√©pendances
if (!runCommand('npm install', 'Installation des d√©pendances')) {
  process.exit(1);
}

// V√©rification TypeScript
if (!runCommand('npx tsc --noEmit', 'V√©rification TypeScript')) {
  console.log('‚ö†Ô∏è Erreurs TypeScript d√©tect√©es, mais continuation...\n');
}

// Build de production
if (!runCommand('npm run build', 'Build de production')) {
  process.exit(1);
}

// V√©rification de Vercel CLI
console.log('üîç V√©rification de Vercel CLI...');
try {
  execSync('vercel --version', { stdio: 'pipe' });
  console.log('‚úÖ Vercel CLI install√©\n');
} catch (error) {
  console.log('‚ùå Vercel CLI non install√©. Installation...');
  if (!runCommand('npm install -g vercel', 'Installation Vercel CLI')) {
    console.log('‚ùå Impossible d\'installer Vercel CLI. Veuillez l\'installer manuellement.');
    process.exit(1);
  }
}

// Cr√©ation du fichier vercel.json s'il n'existe pas
if (!fs.existsSync('vercel.json')) {
  console.log('üìù Cr√©ation du fichier vercel.json...');
  const vercelConfig = {
    "version": 2,
    "builds": [
      {
        "src": "package.json",
        "use": "@vercel/next"
      }
    ],
    "routes": [
      {
        "src": "/(.*)",
        "dest": "/"
      }
    ],
    "env": {
      "NODE_ENV": "production"
    }
  };
  
  fs.writeFileSync('vercel.json', JSON.stringify(vercelConfig, null, 2));
  console.log('‚úÖ vercel.json cr√©√©\n');
}

// Cr√©ation du fichier .vercelignore s'il n'existe pas
if (!fs.existsSync('.vercelignore')) {
  console.log('üìù Cr√©ation du fichier .vercelignore...');
  const vercelIgnore = `# D√©pendances de d√©veloppement
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Fichiers de build
.next
out

# Fichiers de cache
.cache
.parcel-cache

# Fichiers d'environnement
.env.local
.env.development.local
.env.test.local
.env.production.local

# Fichiers de logs
*.log

# Fichiers temporaires
.tmp
.temp

# Fichiers de test
coverage
.nyc_output

# Fichiers de documentation
*.md
!README.md

# Fichiers de configuration
.eslintrc*
.prettierrc*
.editorconfig

# Fichiers de syst√®me
.DS_Store
Thumbs.db
`;
  
  fs.writeFileSync('.vercelignore', vercelIgnore);
  console.log('‚úÖ .vercelignore cr√©√©\n');
}

// D√©ploiement Vercel
console.log('üöÄ D√©ploiement sur Vercel...');
console.log('‚ö†Ô∏è Note: Vous devrez vous connecter √† Vercel si ce n\'est pas d√©j√† fait.\n');

const deployCommand = process.argv.includes('--prod') ? 'vercel --prod' : 'vercel';

if (runCommand(deployCommand, 'D√©ploiement Vercel')) {
  console.log('üéâ D√©ploiement Vercel r√©ussi !');
  console.log('\nüìã Prochaines √©tapes:');
  console.log('1. V√©rifier l\'URL de d√©ploiement fournie');
  console.log('2. Configurer les variables d\'environnement sur Vercel');
  console.log('3. Tester l\'application en production');
  console.log('4. Configurer un domaine personnalis√© si n√©cessaire');
} else {
  console.log('‚ùå √âchec du d√©ploiement Vercel');
  console.log('\nüîß Solutions possibles:');
  console.log('1. V√©rifier votre connexion internet');
  console.log('2. V√©rifier vos identifiants Vercel');
  console.log('3. V√©rifier les variables d\'environnement');
  console.log('4. Consulter les logs de d√©ploiement');
}

console.log('\nüìö Documentation:');
console.log('- Vercel CLI: https://vercel.com/docs/cli');
console.log('- Next.js sur Vercel: https://vercel.com/docs/functions/serverless-functions/runtimes/nodejs');
console.log('- Variables d\'environnement: https://vercel.com/docs/projects/environment-variables');

console.log('\nüöÄ D√©ploiement Vercel termin√© !');
